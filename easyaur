#!/bin/bash
#########################################
#   COPYRIGHT 2021 VINCENT SCHWEIGER	#
#   THIS SCRIPT IS LICENSED UNDER THE	#
#	COSMO LICENSE.			#
#	RESPECT IT IN ANY WAY.		#
#########################################

# Program info
ProgName=$(basename $0)
ROOT=$(pwd)
# Colors
bold="$(tput bold)"
red="$(tput setaf 160)"
boldred="$bold$red"
# Locs
buildspace="$HOME/.pkgbuilder"
outdir="$buildspace/out"
aurloc="$buildspace/aurpkgs"
offloc="$buildspace/pkglist"

# Functions and main logic
echo() {
	if [[ ! -z "$2" ]]; then
		builtin echo "$@"
	else
		builtin echo "$@"
	fi
}

pkg() (
	makepkg -s --nocheck --skippgpcheck --sign
)

eza_help() (
	echo "Usage: $ProgName <subcommand> [options]"
	echo "Subcommands:"
	echo "	build	Build a package"
	echo "	refreshcaches	Refresh the package lists"
	echo "	setup	Setup the $buildspace directory"
	echo "	clean	Delete every directory from $buildspace"
	echo "	addall	Add every package in $outdir and delete it from there"
	echo ""
	echo "For help with each subcommand run:"
	echo "$ProgName <subcommand> -h|--help"
	echo ""
)

eza_refreshcaches() (
	wget https://aur.archlinux.org/packages.gz -O - | gunzip >$aurloc
	pacman -Sql core community extra multilib >$offloc
)

move_built_pkgs() (
	mkdir -p $outdir
	cp *.pkg.tar.* $outdir
)

aurbuild() (
	echo "Building Package $1 from aur"
	loc="$buildspace/$1"
	if [[ -d $loc ]]; then
		cd $loc
		if [[ -f .AUR ]]; then
			git pull --quiet
		else
			echo "$1 is not an AUR package! Try deleting the folder $(realpath $loc)"
			exit 1
		fi
	else
		if git clone "https://aur.archlinux.org/$1.git/" "$loc" --quiet; then
			cd $loc
			touch .AUR
			if [[ ! -e "PKGBUILD" ]]; then
				cd ..
				rm -rf $loc
				echo $boldred"$1 is not available on the AUR!"
				echo $boldred"Try refreshing your package cache (refreshcache subcommand)"
				exit 1
			fi
		else
			echo $boldred"Error cloning from the AUR!"
			exit 1
		fi
	fi

	pkg
	move_built_pkgs

)

build() (
	echo "Building: $1"
	echo "Current workdir: $ROOT"
	# Gets current date for use as $now
	now=$(date +'%d-%m-%Y-%r')
	echo "$now"
	loc="$buildspace/$1"
	# Checks if already cloned
	if [[ -d $loc ]]; then
		cd $loc
		[[ -f ".AUR" ]] && echo "$1 Is an AUR package!" && exit
		asp update
		git pull
	else
		cd $buildspace
		asp export $1
		if [ $? -ne 0 ]; then
			echo "Package '$1' does not exist / errors while cloning"
			exit
		fi
		cd $loc
	fi

	if [[ -f "PKGBUILD" ]]; then
		pkg
		if [[ ! $? == 0 ]]; then
			echo $boldred"ERROR: Operation failed"
			exit 1
		else
			move_built_pkgs
		fi
	fi

	cd $ROOT
)

eza_setup() (
	mkdir -pv $buildspace
	eza_refreshcaches
)

eza_build() (
	if [[ $# -eq 0 ]]; then
		echo "Provide the package to build!"
		exit 1
	fi

	for pkg in "$@"; do
		if [[ $pkg == "local" ]]; then
			pkg
			move_built_pkgs
			continue
		fi
		if grep -Fxq "$pkg" "$offloc"; then
			echo "Building official package ..."
			build "$pkg"
			continue
		else
			if grep -Fxq "$pkg" "$aurloc"; then
				echo "Building AUR package ..."
				aurbuild "$pkg"
				continue
			else
				echo $boldred"The specified package does not exist on the AUR nor on the normal repos!"
				continue
			fi
		fi
	done
)

eza_clean() (
	for f in $(find $buildspace -maxdepth 1 -type d)
	do
		[[ $f == "." ]] && continue
		rm -rf $f
	done
)

eza_addall() (
	for f in $(find $outdir -type f ! -name "*.sig")
	do
		add2repo $f
		rm $f
	done
)

subcommand=$1
case $subcommand in
"" | "-h" | "--help")
	eza_help
	;;
*)
	shift
	eza_${subcommand} $@
	if [ $? = 127 ]; then
		echo "Error: '$subcommand' is not a known subcommand." >&2
		echo "       Run '$ProgName --help' for a list of known subcommands." >&2
		exit 1
	fi
	;;
esac
