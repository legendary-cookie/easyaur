#!/bin/bash
#########################################
#   COPYRIGHT 2022 Vincent Schweiger	#
#   THIS SCRIPT IS LICENSED UNDER THE	#
#	GPLv3 LICENSE.			#
#	RESPECT IT IN ANY WAY.		#
#########################################

# Program info
ProgName=$(basename $0)
VERSION="1.5"
ROOT=$(pwd)
# Colours
bold="$(tput bold)"
red="$(tput setaf 160)"
green="$(tput setaf 40)"
gray="$(tput setaf 248)"
boldred="$bold$red"
boldgreen="$bold$green"
reset="$(tput init)"
# Locs
buildspace="$HOME/.pkgbuilder"
outdir="$buildspace/out"
aurloc="$buildspace/aurpkgs"
offloc="$buildspace/pkglist"

# Functions and main logic
echo() {
	if [[ ! -z "$2" ]]; then
		builtin echo "$@"
	else
		builtin echo "$@"
	fi
}

pkg() (
	makepkg -s --nocheck --skippgpcheck --sign
)

eza_search() (
	echo "${gray}Searching in official repo package list ..."
	grepcmd="grep"
	if command -v rg &>/dev/null; then
		grepcmd="rg"
	fi
	if $grepcmd -q "^$1\$" "$offloc"; then
		echo "${boldgreen}Package is available in the official repositories!"
	else
		echo "${gray}Searching in AUR package list ..."
		if $grepcmd -q "^$1\$" "$aurloc"; then
			echo "${boldgreen}Package is available in the AUR!"
		else
			echo "${boldred}Couldn't find a package with that name, sorry!"
		fi
	fi
)

eza_help() (
	echo "Usage: $ProgName <subcommand> [options]"
	echo "Subcommands:"
	echo "	build	Build a package"
	echo "	rfc	Refresh the package lists"
	echo "	setup	Setup the '$buildspace' directory"
	echo "	clean	Delete every directory from '$buildspace'"
	echo "	addall	Adds every built package to repo"
	echo "	version	Displays version information"
	echo "	repo	Big subcommand, run it with --help"
	echo "	search	Search for a package"
	echo ""
	echo "For help with each subcommand run:"
	echo "$ProgName <subcommand> -h|--help"
	echo ""
)

eza_repo() {

	# sh format
	conf="$HOME/.ezrepo"

	ezr_help() (
		echo "Usage: $ProgName repo <subcommand> [options]"
		echo ""
		echo "Subcommands:"
		echo "	add	Add a package to the repo"
		echo "	remove	Remove a package from the repo"
		echo "	setup	Setup the repository"
		echo "	serve	Start the http server"
		echo ""
	)

	ezr_setup() {
		echo "${gray}Creating config file ..."
		touch $conf
		echo "${bold}Enter the name for the repository (e.g. like core/community/multilib)"
		read reponame
		echo "${bold}Enter the absolute path where the repository should be stored"
		read repoloc
		echo "${bold}Enter the port where the repository should get served"
		read portnum
		echo "${bold}Should the database and packages be signed? [Y/n]"
		read sign
		echo "#!/bin/sh" >$conf
		echo "##### CONFIG ######" >>$conf
		echo "repoloc=$repoloc" >>$conf
		echo "reponame=$reponame" >>$conf
		echo "portnum=$portnum" >>$conf
		if [[ "$sign" == "y" ]] || [[ "$sign" == "Y" ]] || [[ "$sign" == "" ]]; then
			echo "sign=yes" >>$conf
		else
			echo "sign=no" >>$conf
		fi
		echo "${boldgreen}Created the config file at ${conf}!"
		echo "${reset}${gray}Finishing now ..."
		mkdir -p "$repoloc"
		echo "${gray}(sudo) Creating service file"
		sudo sh -c "cat > /etc/systemd/system/easyrepo.service <<- EOF
[Unit]
Description=Serve your archlinux repository
After=network.target

[Service]
Type=simple
User=$USER
ExecStart=/usr/bin/easyaur repo serve $conf
Restart=on-failure

[Install]
WantedBy=multi-user.target
	EOF"
		echo "${gray}(sudo) Reloading daemon files and starting+enabling the service"
		sudo systemctl daemon-reload
		sudo systemctl enable --now easyrepo
	}

	ezr_serve() (
		confloc="$HOME/.ezrepo"
		if [[ ! -z "$1" ]]; then
			if [[ ! -f "$1" ]]; then
				echo "${boldred}You first have to run '$ProgName repo setup'!"
				exit 1
			else
				confloc="$1"
			fi
		fi
		source "$confloc"
		cd "$repoloc"
		echo "${gray}Starting the http server ..."
		python -m http.server $portnum
	)

	ezr_add() (
		if [[ ! -f $conf ]]; then
			echo $boldred"You first have to run '$ProgName repo setup'!"
		else
			source $conf
			if [ -z "$1" ]; then
				echo $boldred"You have to supply a path to the .pkg.tar.* of the package you want to add!"
				exit 1
			fi
			if [[ -f "$1.sig" ]]; then
				cp "$1.sig" "$repoloc"
			else
				if [[ $sign == "yes" ]]; then
					echo $boldred"You have to build a signed package as you have enabled package signing in your config!"
					exit 1
				fi
			fi
			cp "$1" "$repoloc"
			cd $repoloc
			if [[ $sign == "yes" ]]; then
				repo-add $reponame.db.tar.gz $(basename $1) --sign
			else
				repo-add $reponame.db.tar.gz $(basename $1)
			fi
		fi
	)

	ezr_remove() (
		if [[ ! -f $conf ]]; then
			echo $boldred"You first have to run '$ProgName repo setup'!"
		else
			source $conf
			if [ -z "$1" ]; then
				echo $boldred"You have to supply a path to the .pkg.tar.* of the package you want to add!"
				exit 1
			fi
			cd $repoloc
			repo-remove $reponame.db.tar.gz $1
		fi
	)

	subcommand=$1
	case $subcommand in
	"" | "-h" | "--help")
		ezr_help
		;;
	*)
		shift
		ezr_${subcommand} $@
		if [ $? = 127 ]; then
			echo "Error: '$subcommand' is not a known subcommand." >&2
			echo "       Run '$ProgName --help' for a list of known subcommands." >&2
			exit 1
		fi
		;;
	esac
}

eza_refreshcaches() (
	echo "${gray}Refreshing packagelists ..."
	rm -f $aurloc $offloc
	curl -sSL https://aur.archlinux.org/packages.gz | gunzip >$aurloc
	pacman -Sql core community extra multilib >$offloc
	echo "${boldgreen}Refreshed packagelists!"
)

eza_version() (
	echo "EasyAUR version ${bold}${VERSION}${reset}"
	echo ""
	echo "This project is licensed under GPLv3, respect the license in any way."
	echo "Please report bugs and send feature requests/ideas to ${bold}https://github.com/legendary-cookie/easyaur/issues!"
	echo ""
)

move_built_pkgs() (
	mkdir -p $outdir
	cp *.pkg.tar.* $outdir
)

aurbuild() (
	echo $gray"Building Package $1 from aur"
	loc="$buildspace/$1"
	if [[ -d $loc ]]; then
		cd $loc
		if [[ -f .AUR ]]; then
			git pull --quiet
		else
			echo $boldred"$1 is not an AUR package! Try deleting the folder $(realpath $loc)"
			exit 1
		fi
	else
		if git clone "https://aur.archlinux.org/$1.git/" "$loc" --quiet; then
			cd $loc
			touch .AUR
			if [[ ! -e "PKGBUILD" ]]; then
				cd ..
				rm -rf $loc
				echo $boldred"$1 is not available on the AUR!"
				echo $boldred"Try refreshing your package cache (refreshcache subcommand)"
				exit 1
			fi
		else
			echo $boldred"Error cloning from the AUR!"
			exit 1
		fi
	fi

	pkg
	move_built_pkgs

)

build() (
	echo $gray"Building: $1"
	echo $gray"Current workdir: $ROOT"
	# Gets current date for use as $now
	now=$(date +'%d-%m-%Y-%r')
	echo "$now"
	loc="$buildspace/$1"
	# Checks if already cloned
	if [[ -d $loc ]]; then
		cd $loc
		[[ -f ".AUR" ]] && echo $boldred"$1 Is an AUR package!" && exit
		asp update
		git pull
	else
		cd $buildspace
		asp export $1
		if [ $? -ne 0 ]; then
			echo $boldred"Package '$1' does not exist / errors while cloning"
			exit
		fi
		cd $loc
	fi

	if [[ -f "PKGBUILD" ]]; then
		pkg
		if [[ ! $? == 0 ]]; then
			echo $boldred"ERROR: Makepkg failed with exit code $?"
			exit 1
		else
			move_built_pkgs
		fi
	fi

	cd $ROOT
)

eza_setup() (
	mkdir -pv $buildspace
	eza_refreshcaches
)

eza_addall() (
        echo "${gray}Adding all built packages to the repository ..."
        for f in $(find $outdir -type f ! -name "*.sig"); do
                eza_repo add $f
                rm $f
                rm $f.sig
        done
        echo "${boldgreen}Added all packages to repo!"
)


eza_build() (
	if [[ $# -eq 0 ]]; then
		echo "${boldred}You have to provide the package(s) to build!"
		exit 1
	fi

	for pkg in "$@"; do
		if [[ $pkg == "local" ]]; then
			pkg
			move_built_pkgs
			continue
		fi
		if grep -Fxq "$pkg" "$offloc"; then
			echo "${gray}Building official package ..."
			build "$pkg"
			continue
		else
			if grep -Fxq "$pkg" "$aurloc"; then
				echo "${gray}Building AUR package ..."
				aurbuild "$pkg"
				continue
			else
				echo "${boldred}The specified package does not exist on the AUR nor on the normal repos!"
				continue
			fi
		fi
	done

	eza_addall
)

eza_clean() (
	echo "${gray}Cleaning the buildspace ..."
	for f in $(find "$buildspace" -maxdepth 1 -type d); do
		[[ "$f" == "." ]] && continue
		rm -rf "$f"
	done
	echo "${boldgreen}Cleaned the buildspace!"
)

if [[ ! -d "$HOME/.pkgbuilder" ]]; then
	mkdir -p "$HOME/.pkgbuilder"
fi

subcommand=$1
case $subcommand in
"" | "-h" | "--help")
	eza_help
	;;
"rfc")
	eza_refreshcaches	
	;;
*)
	shift
	eza_${subcommand} $@
	if [ $? = 127 ]; then
		echo "${boldred}Error: ${reset}'${subcommand}' is not a known subcommand." >&2
		echo "       Run '${ProgName} --help' for a list of known subcommands." >&2
		exit 1
	fi
	;;
esac
